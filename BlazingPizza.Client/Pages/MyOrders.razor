@page "/myorders"
@attribute [Authorize]
@inject OrdersClient OrdersClient

<PageTitle>FM-SHISHAS</PageTitle>

<div class="main">
    <TemplatedList Loader="@LoadOrders" ListGroupClass="orders-list">
        <Loading>Cargando...</Loading>
        <Empty>
            <h2>No hay pedidos</h2>
            <a class="btn btn-success" href="">Realizar pedido</a>
        </Empty>
        <Item Context="item">
            <div class="col">
                <h5>@item.Order.CreatedTime.ToLongDateString()</h5>
                <p>Artículos: <strong>@item.Order.Pizzas.Count()</strong></p>
                
                <ul>
                    @foreach (var pizza in item.Order.Pizzas)
                    {
                        <li>
                            <strong>@pizza.Special?.Name</strong> (@pizza.GetFormattedTotalPrice()€)
                        </li>
                    }
                </ul>

                <p>Precio total: <strong>€@item.Order.GetFormattedTotalPrice()</strong></p>
                
                <!-- Mostrar el método de envío de la orden, no de la pizza -->
                <p>
                    <strong>Método de envío:</strong> @item.Order.ShippingMethod
                </p>
            </div>
            <div class="col">
                Estado: <strong>@item.StatusText</strong>
            </div>
            <div class="col flex-grow-0">
                <a href="myorders/@item.Order.OrderId" class="btn btn-success">
                    Seguimiento
                </a>
            </div>
        </Item>
    </TemplatedList>
</div>

@code {
    async Task<IEnumerable<OrderWithStatus>> LoadOrders()
    {
        var ordersWithStatus = Enumerable.Empty<OrderWithStatus>();
        try
        {
            ordersWithStatus = await OrdersClient.GetOrders();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        return ordersWithStatus;
    }
}
